// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analizadores/Lexico.jflex

package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;  
import main.*;

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\u10df\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\3"+
    "\1\4\5\0\1\5\1\6\2\0\1\7\1\10\1\11"+
    "\1\0\12\12\1\13\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\0\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\0\1\50\1\0\1\51"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\57\1\64\1\65\1\66\1\67"+
    "\1\70\1\57\1\71\1\72\1\73\1\74\1\75\1\57"+
    "\1\76\1\77\1\100\265\0\2\30\115\0\1\40\u019c\0"+
    "\1\101\1\102\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\1\1\11\16\1\1\12\1\13"+
    "\16\14\1\0\1\15\1\0\2\16\1\17\1\0\1\20"+
    "\1\0\1\21\1\22\25\0\25\14\1\6\1\0\1\23"+
    "\3\0\1\24\2\0\1\25\4\0\1\26\1\0\1\27"+
    "\1\30\1\31\2\0\1\32\1\33\2\0\1\34\1\23"+
    "\3\14\1\24\2\14\1\25\4\14\1\26\1\14\1\27"+
    "\1\30\1\31\2\14\1\32\1\33\2\14\1\34\4\0"+
    "\1\35\1\36\1\37\4\0\1\40\5\0\4\14\1\35"+
    "\1\36\1\37\4\14\1\40\5\14\6\0\1\41\1\42"+
    "\1\43\4\0\5\14\1\41\1\42\1\43\4\14\1\44"+
    "\1\45\1\0\1\46\6\0\1\47\1\50\1\0\1\45"+
    "\1\14\1\46\6\14\1\47\1\50\1\14\1\51\4\0"+
    "\1\52\1\53\1\54\1\55\1\0\1\51\4\14\1\52"+
    "\1\53\1\54\1\55\1\14\1\56\1\0\1\57\1\0"+
    "\1\60\1\56\1\14\1\57\1\14\1\60\1\61\1\62"+
    "\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\103\0\103\0\103"+
    "\0\u010c\0\u014f\0\u0192\0\103\0\u01d5\0\103\0\u0218\0\u025b"+
    "\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473"+
    "\0\u04b6\0\u04f9\0\u053c\0\u057f\0\103\0\103\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\206\0\103\0\311\0\103"+
    "\0\311\0\103\0\u096c\0\103\0\u09af\0\103\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u096c\0\u1533\0\103\0\u1576\0\u15b9\0\u15fc\0\103"+
    "\0\u163f\0\u1682\0\103\0\u16c5\0\u1708\0\u174b\0\u178e\0\103"+
    "\0\u17d1\0\103\0\u1814\0\103\0\u1857\0\u189a\0\103\0\103"+
    "\0\u18dd\0\u1920\0\u1963\0\u0605\0\u19a6\0\u19e9\0\u1a2c\0\u0605"+
    "\0\u1a6f\0\u1ab2\0\u0605\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u0605"+
    "\0\u1c01\0\u0605\0\u1c44\0\u0605\0\u1c87\0\u1cca\0\u0605\0\u0605"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\103"+
    "\0\103\0\103\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\103\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u0605\0\u0605\0\u0605\0\u2249\0\u228c\0\u22cf\0\u2312\0\u0605"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\103\0\u2636\0\103\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u0605"+
    "\0\u28d4\0\u0605\0\u2917\0\u295a\0\u299d\0\u29e0\0\103\0\103"+
    "\0\u2a23\0\103\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\103\0\u2c3b\0\u0605\0\u2c7e\0\u0605\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u0605\0\u2e96\0\103"+
    "\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\103\0\103\0\103\0\103"+
    "\0\u2fe5\0\u0605\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u0605\0\u0605"+
    "\0\u0605\0\u0605\0\u3134\0\103\0\u3177\0\103\0\u31ba\0\103"+
    "\0\u0605\0\u31fd\0\u0605\0\u3240\0\u0605\0\103\0\103\0\u0605"+
    "\0\u0605";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\2\1\21\1\22\1\23\1\24\1\25\2\2"+
    "\1\26\1\27\2\2\1\30\1\31\1\32\1\33\1\2"+
    "\1\34\3\2\1\35\1\36\1\2\1\37\1\40\1\41"+
    "\1\42\1\43\1\40\1\44\1\45\2\40\1\46\1\47"+
    "\2\40\1\50\1\51\1\52\1\53\1\40\1\54\3\40"+
    "\1\5\1\2\103\0\2\55\1\56\100\55\2\57\1\0"+
    "\1\57\1\60\75\57\1\61\17\0\1\62\74\0\1\63"+
    "\1\12\103\0\1\64\72\0\1\65\4\0\1\66\144\0"+
    "\27\67\41\0\1\70\31\0\1\70\40\0\1\71\5\0"+
    "\1\72\23\0\1\71\5\0\1\72\43\0\1\73\4\0"+
    "\1\74\24\0\1\73\4\0\1\74\44\0\1\75\2\0"+
    "\1\76\7\0\1\77\16\0\1\75\2\0\1\76\7\0"+
    "\1\77\43\0\1\100\31\0\1\100\41\0\1\101\31\0"+
    "\1\101\41\0\1\102\30\0\1\102\51\0\1\103\3\0"+
    "\1\104\2\0\1\105\4\0\1\106\4\0\1\107\7\0"+
    "\1\103\3\0\1\104\3\0\1\105\4\0\1\106\4\0"+
    "\1\107\45\0\1\110\31\0\1\110\36\0\1\111\30\0"+
    "\1\111\66\0\1\112\31\0\1\112\36\0\1\113\31\0"+
    "\1\113\41\0\1\114\30\0\1\114\40\0\1\40\1\0"+
    "\1\40\24\0\1\70\11\0\20\40\1\115\7\40\12\0"+
    "\1\40\1\0\1\40\36\0\30\40\12\0\1\40\1\0"+
    "\1\40\14\0\1\71\5\0\1\72\13\0\10\40\1\116"+
    "\5\40\1\117\11\40\12\0\1\40\1\0\1\40\15\0"+
    "\1\73\4\0\1\74\13\0\11\40\1\120\4\40\1\121"+
    "\11\40\12\0\1\40\1\0\1\40\16\0\1\75\2\0"+
    "\1\76\7\0\1\77\4\0\12\40\1\122\2\40\1\123"+
    "\7\40\1\124\2\40\12\0\1\40\1\0\1\40\24\0"+
    "\1\100\11\0\20\40\1\125\7\40\12\0\1\40\1\0"+
    "\1\40\15\0\1\101\20\0\11\40\1\126\16\40\12\0"+
    "\1\40\1\0\1\40\6\0\1\102\27\0\1\40\1\127"+
    "\26\40\12\0\1\40\1\0\1\40\6\0\1\103\3\0"+
    "\1\104\2\0\1\105\4\0\1\106\4\0\1\107\6\0"+
    "\1\40\1\130\3\40\1\131\3\40\1\132\4\40\1\133"+
    "\4\40\1\134\4\40\12\0\1\40\1\0\1\40\24\0"+
    "\1\110\11\0\20\40\1\135\7\40\12\0\1\40\1\0"+
    "\1\40\12\0\1\111\23\0\5\40\1\136\22\40\12\0"+
    "\1\40\1\0\1\40\27\0\1\112\6\0\23\40\1\137"+
    "\4\40\12\0\1\40\1\0\1\40\15\0\1\113\20\0"+
    "\11\40\1\140\16\40\12\0\1\40\1\0\1\40\6\0"+
    "\1\114\27\0\1\40\1\141\26\40\14\0\1\142\70\0"+
    "\3\65\1\143\77\65\10\0\1\67\1\0\1\67\36\0"+
    "\30\67\41\0\1\144\31\0\1\144\32\0\1\145\30\0"+
    "\1\145\62\0\1\146\1\0\1\147\27\0\1\146\1\0"+
    "\1\147\57\0\1\150\31\0\1\150\47\0\1\151\31\0"+
    "\1\151\33\0\1\152\30\0\1\152\50\0\1\153\30\0"+
    "\1\153\52\0\1\154\30\0\1\154\45\0\1\155\30\0"+
    "\1\155\70\0\1\156\31\0\1\156\32\0\1\157\30\0"+
    "\1\157\73\0\1\160\31\0\1\160\30\0\1\161\30\0"+
    "\1\161\61\0\1\162\31\0\1\162\40\0\1\163\30\0"+
    "\1\163\57\0\1\164\31\0\1\164\46\0\1\165\4\0"+
    "\1\166\24\0\1\165\4\0\1\166\53\0\1\167\31\0"+
    "\1\167\43\0\1\170\31\0\1\170\56\0\1\171\31\0"+
    "\1\171\41\0\1\172\4\0\1\173\24\0\1\172\4\0"+
    "\1\173\21\0\1\40\1\0\1\40\24\0\1\144\11\0"+
    "\20\40\1\174\7\40\12\0\1\40\1\0\1\40\6\0"+
    "\1\145\27\0\1\40\1\175\26\40\12\0\1\40\1\0"+
    "\1\40\17\0\1\146\1\0\1\147\14\0\13\40\1\176"+
    "\1\40\1\177\12\40\12\0\1\40\1\0\1\40\30\0"+
    "\1\150\5\0\24\40\1\200\3\40\12\0\1\40\1\0"+
    "\1\40\27\0\1\151\6\0\23\40\1\201\4\40\12\0"+
    "\1\40\1\0\1\40\12\0\1\152\23\0\5\40\1\202"+
    "\22\40\12\0\1\40\1\0\1\40\11\0\1\153\24\0"+
    "\4\40\1\203\23\40\12\0\1\40\1\0\1\40\12\0"+
    "\1\154\23\0\5\40\1\204\22\40\12\0\1\40\1\0"+
    "\1\40\6\0\1\155\27\0\1\40\1\205\26\40\12\0"+
    "\1\40\1\0\1\40\25\0\1\156\10\0\21\40\1\206"+
    "\6\40\12\0\1\40\1\0\1\40\7\0\1\157\26\0"+
    "\2\40\1\207\25\40\12\0\1\40\1\0\1\40\31\0"+
    "\1\160\4\0\25\40\1\210\2\40\12\0\1\40\1\0"+
    "\1\40\11\0\1\161\24\0\4\40\1\211\23\40\12\0"+
    "\1\40\1\0\1\40\21\0\1\162\14\0\15\40\1\212"+
    "\12\40\12\0\1\40\1\0\1\40\11\0\1\163\24\0"+
    "\4\40\1\213\23\40\12\0\1\40\1\0\1\40\17\0"+
    "\1\164\16\0\13\40\1\214\14\40\12\0\1\40\1\0"+
    "\1\40\15\0\1\165\4\0\1\166\13\0\11\40\1\215"+
    "\4\40\1\216\11\40\12\0\1\40\1\0\1\40\25\0"+
    "\1\167\10\0\21\40\1\217\6\40\12\0\1\40\1\0"+
    "\1\40\20\0\1\170\15\0\14\40\1\220\13\40\12\0"+
    "\1\40\1\0\1\40\26\0\1\171\7\0\22\40\1\221"+
    "\5\40\12\0\1\40\1\0\1\40\17\0\1\172\4\0"+
    "\1\173\11\0\13\40\1\222\4\40\1\223\7\40\21\0"+
    "\1\56\122\0\1\224\31\0\1\224\53\0\1\225\31\0"+
    "\1\225\46\0\1\226\31\0\1\226\32\0\1\227\30\0"+
    "\1\227\73\0\1\230\1\231\30\0\1\230\1\231\26\0"+
    "\1\232\30\0\1\232\64\0\1\233\31\0\1\233\53\0"+
    "\1\234\31\0\1\234\34\0\1\235\30\0\1\235\54\0"+
    "\1\236\31\0\1\236\41\0\1\237\30\0\1\237\64\0"+
    "\1\240\31\0\1\240\42\0\1\241\31\0\1\241\64\0"+
    "\1\242\31\0\1\242\50\0\1\243\31\0\1\243\36\0"+
    "\1\244\31\0\1\244\30\0\1\40\1\0\1\40\24\0"+
    "\1\224\11\0\20\40\1\245\7\40\12\0\1\40\1\0"+
    "\1\40\27\0\1\225\6\0\23\40\1\246\4\40\12\0"+
    "\1\40\1\0\1\40\25\0\1\226\10\0\21\40\1\247"+
    "\6\40\12\0\1\40\1\0\1\40\7\0\1\227\26\0"+
    "\2\40\1\250\25\40\12\0\1\40\1\0\1\40\31\0"+
    "\1\230\1\231\3\0\25\40\1\251\1\252\1\40\12\0"+
    "\1\40\1\0\1\40\10\0\1\232\25\0\3\40\1\253"+
    "\24\40\12\0\1\40\1\0\1\40\23\0\1\233\12\0"+
    "\17\40\1\254\10\40\12\0\1\40\1\0\1\40\26\0"+
    "\1\234\7\0\22\40\1\255\5\40\12\0\1\40\1\0"+
    "\1\40\12\0\1\235\23\0\5\40\1\256\22\40\12\0"+
    "\1\40\1\0\1\40\15\0\1\236\20\0\11\40\1\257"+
    "\16\40\12\0\1\40\1\0\1\40\6\0\1\237\27\0"+
    "\1\40\1\260\26\40\12\0\1\40\1\0\1\40\21\0"+
    "\1\240\14\0\15\40\1\261\12\40\12\0\1\40\1\0"+
    "\1\40\13\0\1\241\22\0\7\40\1\262\20\40\12\0"+
    "\1\40\1\0\1\40\27\0\1\242\6\0\23\40\1\263"+
    "\4\40\12\0\1\40\1\0\1\40\27\0\1\243\6\0"+
    "\23\40\1\264\4\40\12\0\1\40\1\0\1\40\15\0"+
    "\1\244\20\0\11\40\1\265\16\40\51\0\1\266\66\0"+
    "\1\267\31\0\1\267\52\0\1\270\31\0\1\270\45\0"+
    "\1\271\31\0\1\271\45\0\1\272\31\0\1\272\56\0"+
    "\1\273\31\0\1\273\45\0\1\274\31\0\1\274\37\0"+
    "\1\275\30\0\1\275\71\0\1\276\31\0\1\276\46\0"+
    "\1\277\31\0\1\277\43\0\1\300\31\0\1\300\43\0"+
    "\1\301\30\0\1\301\45\0\1\302\30\0\1\302\40\0"+
    "\1\40\1\0\1\40\34\0\1\266\1\0\30\40\12\0"+
    "\1\40\1\0\1\40\20\0\1\267\15\0\14\40\1\303"+
    "\13\40\12\0\1\40\1\0\1\40\22\0\1\270\13\0"+
    "\16\40\1\304\11\40\12\0\1\40\1\0\1\40\17\0"+
    "\1\271\16\0\13\40\1\305\14\40\12\0\1\40\1\0"+
    "\1\40\14\0\1\272\21\0\10\40\1\306\17\40\12\0"+
    "\1\40\1\0\1\40\22\0\1\273\13\0\16\40\1\307"+
    "\11\40\12\0\1\40\1\0\1\40\17\0\1\274\16\0"+
    "\13\40\1\310\14\40\12\0\1\40\1\0\1\40\6\0"+
    "\1\275\27\0\1\40\1\311\26\40\12\0\1\40\1\0"+
    "\1\40\26\0\1\276\7\0\22\40\1\312\5\40\12\0"+
    "\1\40\1\0\1\40\24\0\1\277\11\0\20\40\1\313"+
    "\7\40\12\0\1\40\1\0\1\40\17\0\1\300\16\0"+
    "\13\40\1\314\14\40\12\0\1\40\1\0\1\40\12\0"+
    "\1\301\23\0\5\40\1\315\22\40\12\0\1\40\1\0"+
    "\1\40\6\0\1\302\27\0\1\40\1\316\26\40\52\0"+
    "\1\317\66\0\1\320\31\0\1\320\46\0\1\321\31\0"+
    "\1\321\43\0\1\322\30\0\1\322\46\0\1\323\7\0"+
    "\1\324\3\0\1\325\14\0\1\323\10\0\1\324\3\0"+
    "\1\325\40\0\1\326\31\0\1\326\56\0\1\327\31\0"+
    "\1\327\35\0\1\330\30\0\1\330\65\0\1\331\31\0"+
    "\1\331\53\0\1\332\31\0\1\332\44\0\1\333\31\0"+
    "\1\333\24\0\1\40\1\0\1\40\21\0\1\320\14\0"+
    "\15\40\1\334\12\40\12\0\1\40\1\0\1\40\17\0"+
    "\1\321\16\0\13\40\1\335\14\40\12\0\1\40\1\0"+
    "\1\40\12\0\1\322\23\0\5\40\1\336\22\40\12\0"+
    "\1\40\1\0\1\40\7\0\1\323\7\0\1\324\3\0"+
    "\1\325\12\0\2\40\1\337\10\40\1\340\3\40\1\341"+
    "\10\40\12\0\1\40\1\0\1\40\13\0\1\326\22\0"+
    "\7\40\1\342\20\40\12\0\1\40\1\0\1\40\21\0"+
    "\1\327\14\0\15\40\1\343\12\40\12\0\1\40\1\0"+
    "\1\40\6\0\1\330\27\0\1\40\1\344\26\40\12\0"+
    "\1\40\1\0\1\40\22\0\1\331\13\0\16\40\1\345"+
    "\11\40\12\0\1\40\1\0\1\40\25\0\1\332\10\0"+
    "\21\40\1\346\6\40\12\0\1\40\1\0\1\40\21\0"+
    "\1\333\14\0\15\40\1\347\12\40\27\0\1\350\30\0"+
    "\1\350\45\0\1\351\30\0\1\351\60\0\1\352\31\0"+
    "\1\352\50\0\1\353\31\0\1\353\57\0\1\354\31\0"+
    "\1\354\32\0\1\355\30\0\1\355\63\0\1\356\31\0"+
    "\1\356\61\0\1\357\1\360\30\0\1\357\1\360\51\0"+
    "\1\361\31\0\1\361\12\0\1\40\1\0\1\40\12\0"+
    "\1\350\23\0\5\40\1\362\22\40\12\0\1\40\1\0"+
    "\1\40\6\0\1\351\27\0\1\40\1\363\26\40\12\0"+
    "\1\40\1\0\1\40\15\0\1\352\20\0\11\40\1\364"+
    "\16\40\12\0\1\40\1\0\1\40\15\0\1\353\20\0"+
    "\11\40\1\365\16\40\12\0\1\40\1\0\1\40\24\0"+
    "\1\354\11\0\20\40\1\366\7\40\12\0\1\40\1\0"+
    "\1\40\6\0\1\355\27\0\1\40\1\367\26\40\12\0"+
    "\1\40\1\0\1\40\20\0\1\356\15\0\14\40\1\370"+
    "\13\40\12\0\1\40\1\0\1\40\31\0\1\357\1\360"+
    "\3\0\25\40\1\371\1\372\1\40\12\0\1\40\1\0"+
    "\1\40\33\0\1\361\2\0\27\40\1\373\41\0\1\374"+
    "\31\0\1\374\45\0\1\375\31\0\1\375\41\0\1\376"+
    "\30\0\1\376\45\0\1\377\30\0\1\377\51\0\1\u0100"+
    "\30\0\1\u0100\40\0\1\40\1\0\1\40\24\0\1\374"+
    "\11\0\20\40\1\u0101\7\40\12\0\1\40\1\0\1\40"+
    "\21\0\1\375\14\0\15\40\1\u0102\12\40\12\0\1\40"+
    "\1\0\1\40\12\0\1\376\23\0\5\40\1\u0103\22\40"+
    "\12\0\1\40\1\0\1\40\6\0\1\377\27\0\1\40"+
    "\1\u0104\26\40\12\0\1\40\1\0\1\40\6\0\1\u0100"+
    "\27\0\1\40\1\u0105\26\40\27\0\1\u0106\30\0\1\u0106"+
    "\57\0\1\u0107\31\0\1\u0107\25\0\1\40\1\0\1\40"+
    "\12\0\1\u0106\23\0\5\40\1\u0108\22\40\12\0\1\40"+
    "\1\0\1\40\20\0\1\u0107\15\0\14\40\1\u0109\13\40"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12931];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\3\1\1\11\1\1\1\11"+
    "\16\1\2\11\16\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\1\11\1\1\25\0\26\1"+
    "\1\0\1\11\3\0\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\1\1\11\2\0\2\11\2\0\31\1"+
    "\4\0\3\11\4\0\1\11\5\0\21\1\6\0\1\11"+
    "\1\1\1\11\4\0\14\1\2\11\1\0\1\11\6\0"+
    "\1\1\1\11\1\0\14\1\1\11\4\0\4\11\1\0"+
    "\12\1\1\11\1\0\1\11\1\0\1\11\5\1\2\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer buffer = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF, -1, -1, null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { cosaspublicas.errores.add(new token("Lexico",yytext()+" no pertenece al lenguaje",yyline,yycolumn));
System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 51: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 52: break;
          case 3:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PARIZQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 4:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PARDER, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 5:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.COMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 6:
            { cosaspublicas.tokens.add(new token(yytext(),"Double",yyline,yycolumn));
                return new Symbol(ParserSym.DECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 7:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.DOSP, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 8:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 9:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 10:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CORA, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 11:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CORC, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 12:
            { cosaspublicas.tokens.add(new token(yytext(),"ID",yyline,yycolumn));
            return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 13:
            { 
            }
          // fall through
          case 63: break;
          case 14:
            { cosaspublicas.tokens.add(new token(yytext(),"CHAR",yyline,yycolumn));
            return new Symbol(ParserSym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 15:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.MAYORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 16:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CUATROP, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 17:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.MENORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 18:
            { cosaspublicas.tokens.add(new token(yytext(),"Id",yyline,yycolumn));
                return new Symbol(ParserSym.IDARREGLO, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 19:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RARR, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 20:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RDIV, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 21:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.REND, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 22:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMAX, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 23:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 24:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMOD, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 25:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMUL, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 26:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RRES, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 27:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RSUM, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 28:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RVAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 29:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 30:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REJEY, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 31:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REXEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 32:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMODA, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 33:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RLABEL, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 34:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RMEDIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 35:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RPRINT, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 36:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RCHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 37:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RCOLUMN, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 38:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RDOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 39:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 40:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RVALUES, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 41:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RCONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 42:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMEDIANA, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 43:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
              return new Symbol(ParserSym.RPROGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 44:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 45:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 46:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RBAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 47:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RPIE, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 48:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RVARIANZA, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 49:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RLINE, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 50:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RHISTOGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
