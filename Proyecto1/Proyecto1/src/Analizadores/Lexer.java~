// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Analizadores/Lexico.jflex

package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;  
import main.*;

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\u10df\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\2\1\22\0\1\1\1\3"+
    "\1\4\5\0\1\5\1\6\2\0\1\7\1\10\1\11"+
    "\1\0\12\12\1\13\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\26\1\33\1\34\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\42\1\43\1\44\1\26"+
    "\1\45\1\46\1\47\1\50\1\0\1\51\1\0\1\52"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\26\1\33\1\34\1\35\1\36"+
    "\1\37\1\26\1\40\1\41\1\42\1\43\1\44\1\26"+
    "\1\45\1\46\1\47\265\0\2\53\115\0\1\54\u019c\0"+
    "\1\55\1\56\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\1\1\11\1\1\16\12\1\13"+
    "\1\14\1\1\1\0\1\15\1\0\1\16\1\17\1\0"+
    "\1\20\1\0\1\21\1\22\5\12\1\0\5\12\1\0"+
    "\6\12\1\0\4\12\1\0\1\12\1\0\1\6\1\0"+
    "\1\23\3\12\1\24\1\12\1\24\1\12\1\25\3\12"+
    "\1\0\1\12\1\26\1\12\1\27\1\30\1\31\1\27"+
    "\2\12\1\0\2\32\1\33\1\12\1\0\1\12\1\34"+
    "\1\33\3\12\1\0\1\12\1\35\1\36\1\37\2\12"+
    "\1\0\2\12\1\0\1\40\2\12\1\0\1\12\1\0"+
    "\2\12\2\0\2\12\1\0\3\12\1\0\1\41\2\42"+
    "\1\43\1\12\1\43\1\12\1\0\2\12\1\0\1\44"+
    "\1\45\1\12\1\0\1\46\4\12\1\0\1\12\1\0"+
    "\1\12\2\47\2\50\1\12\1\0\2\51\2\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\52\1\53\1\54\1\55"+
    "\1\54\1\55\1\12\1\0\1\56\1\12\1\0\2\57"+
    "\1\12\1\0\2\60\2\61\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\57\0\57\0\57"+
    "\0\274\0\353\0\u011a\0\57\0\u0149\0\57\0\u0178\0\u01a7"+
    "\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f"+
    "\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\57\0\57\0\u0439"+
    "\0\136\0\57\0\215\0\57\0\57\0\u0468\0\57\0\u0497"+
    "\0\57\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\u0468\0\u09bb\0\u01d6\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u01d6\0\u0a77\0\57\0\u0aa6\0\u01d6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u01d6\0\u0bc0\0\u01d6\0\u0bef"+
    "\0\u01d6\0\57\0\u0c1e\0\u0c4d\0\u0c7c\0\u01d6\0\57\0\u01d6"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\57\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u01d6\0\u01d6\0\u01d6\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u01d6\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u01d6\0\u125c\0\u128b\0\u01d6"+
    "\0\u12ba\0\57\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\57"+
    "\0\u01d6\0\u13d4\0\u1403\0\u01d6\0\u1432\0\u1461\0\u1490\0\u14bf"+
    "\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u01d6\0\57"+
    "\0\u1608\0\u1637\0\u01d6\0\57\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\u1722\0\u1751\0\u1780\0\u01d6\0\57\0\u01d6\0\u01d6\0\u01d6"+
    "\0\57\0\57\0\u17af\0\u17de\0\u01d6\0\u180d\0\u183c\0\u01d6"+
    "\0\57\0\u186b\0\u189a\0\u01d6\0\57\0\u01d6\0\57\0\u01d6"+
    "\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26"+
    "\2\21\1\27\1\30\2\21\1\31\1\32\1\33\1\34"+
    "\1\21\1\35\3\21\1\36\1\37\2\2\1\40\1\5"+
    "\1\2\57\0\2\41\1\42\54\41\4\43\1\44\51\43"+
    "\1\44\12\0\1\12\4\0\1\45\50\0\1\46\1\12"+
    "\57\0\1\47\46\0\1\50\4\0\1\51\67\0\27\52"+
    "\17\0\1\21\1\0\1\21\6\0\17\21\1\53\7\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\27\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\7\21"+
    "\1\54\5\21\1\55\11\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\10\21\1\56\4\21\1\57\11\21"+
    "\2\0\1\21\1\60\13\0\1\21\1\0\1\21\6\0"+
    "\11\21\1\61\2\21\1\62\7\21\1\63\2\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\17\21\1\64"+
    "\7\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\10\21\1\65\16\21\2\0\1\21\1\66\13\0\1\21"+
    "\1\0\1\21\6\0\1\67\26\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\1\70\3\21\1\71\3\21"+
    "\1\72\4\21\1\73\4\21\1\74\4\21\2\0\1\21"+
    "\1\75\13\0\1\21\1\0\1\21\6\0\17\21\1\76"+
    "\7\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\4\21\1\77\22\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\22\21\1\100\4\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\10\21\1\101\16\21\2\0"+
    "\1\21\1\102\13\0\1\21\1\0\1\21\6\0\1\103"+
    "\26\21\2\0\1\21\47\0\1\104\25\0\1\105\44\0"+
    "\3\50\1\106\53\50\10\0\1\52\1\0\1\52\6\0"+
    "\27\52\2\0\1\52\14\0\1\21\1\0\1\21\6\0"+
    "\17\21\1\107\7\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\1\110\26\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\12\21\1\111\1\21\1\112\12\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\23\21"+
    "\1\113\3\21\2\0\1\21\14\0\1\21\1\0\1\21"+
    "\6\0\22\21\1\114\4\21\2\0\1\21\50\0\1\115"+
    "\22\0\1\21\1\0\1\21\6\0\4\21\1\116\22\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\3\21"+
    "\1\117\23\21\2\0\1\21\14\0\1\21\1\0\1\21"+
    "\6\0\4\21\1\120\22\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\1\121\26\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\20\21\1\122\6\21\2\0"+
    "\1\21\1\0\1\123\43\0\1\123\12\0\1\123\12\0"+
    "\1\21\1\0\1\21\6\0\1\21\1\124\25\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\24\21\1\125"+
    "\2\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\3\21\1\126\23\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\14\21\1\127\12\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\3\21\1\130\23\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\12\21\1\131"+
    "\14\21\2\0\1\21\41\0\1\132\31\0\1\21\1\0"+
    "\1\21\6\0\10\21\1\133\4\21\1\134\11\21\2\0"+
    "\1\21\1\135\13\0\1\21\1\0\1\21\6\0\20\21"+
    "\1\136\6\21\2\0\1\21\1\0\1\137\12\0\1\21"+
    "\1\0\1\21\6\0\13\21\1\140\13\21\2\0\1\21"+
    "\14\0\1\21\1\0\1\21\6\0\21\21\1\141\5\21"+
    "\2\0\1\21\46\0\1\142\24\0\1\21\1\0\1\21"+
    "\6\0\12\21\1\143\4\21\1\144\7\21\2\0\1\21"+
    "\40\0\1\145\41\0\1\42\47\0\1\21\1\0\1\21"+
    "\6\0\17\21\1\146\7\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\22\21\1\147\4\21\2\0\1\21"+
    "\14\0\1\21\1\0\1\21\6\0\20\21\1\150\6\21"+
    "\2\0\1\21\1\0\1\151\12\0\1\21\1\0\1\21"+
    "\6\0\1\21\1\152\25\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\24\21\1\153\1\154\1\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\2\21\1\155"+
    "\24\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\16\21\1\156\10\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\21\21\1\157\5\21\2\0\1\21\46\0"+
    "\1\160\24\0\1\21\1\0\1\21\6\0\4\21\1\161"+
    "\22\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\10\21\1\162\16\21\2\0\1\21\1\163\13\0\1\21"+
    "\1\0\1\21\6\0\1\164\26\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\14\21\1\165\12\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\6\21\1\166"+
    "\20\21\2\0\1\21\41\0\1\167\31\0\1\21\1\0"+
    "\1\21\6\0\22\21\1\170\4\21\2\0\1\21\47\0"+
    "\1\171\23\0\1\21\1\0\1\21\6\0\22\21\1\172"+
    "\4\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\10\21\1\173\16\21\2\0\1\21\1\174\13\0\1\21"+
    "\1\0\1\21\6\0\27\21\1\175\1\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\13\21\1\176\13\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\15\21\1\177"+
    "\11\21\2\0\1\21\42\0\1\200\30\0\1\21\1\0"+
    "\1\21\6\0\12\21\1\201\14\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\7\21\1\202\17\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\15\21\1\203"+
    "\11\21\2\0\1\21\42\0\1\204\30\0\1\21\1\0"+
    "\1\21\6\0\12\21\1\205\14\21\2\0\1\21\14\0"+
    "\1\21\1\0\1\21\6\0\1\206\26\21\2\0\1\21"+
    "\25\0\1\207\45\0\1\21\1\0\1\21\6\0\21\21"+
    "\1\210\5\21\2\0\1\21\14\0\1\21\1\0\1\21"+
    "\6\0\17\21\1\211\7\21\2\0\1\21\46\0\1\212"+
    "\24\0\1\21\1\0\1\21\6\0\12\21\1\213\14\21"+
    "\2\0\1\21\37\0\1\214\33\0\1\21\1\0\1\21"+
    "\6\0\4\21\1\215\22\21\2\0\1\21\14\0\1\21"+
    "\1\0\1\21\6\0\1\216\26\21\2\0\1\21\25\0"+
    "\1\217\106\0\1\220\15\0\1\21\1\0\1\21\6\0"+
    "\14\21\1\221\12\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\12\21\1\222\14\21\2\0\1\21\37\0"+
    "\1\223\33\0\1\21\1\0\1\21\6\0\4\21\1\224"+
    "\22\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\1\21\1\225\10\21\1\226\3\21\1\227\10\21\2\0"+
    "\1\21\14\0\1\21\1\0\1\21\6\0\6\21\1\230"+
    "\20\21\2\0\1\21\33\0\1\231\37\0\1\21\1\0"+
    "\1\21\6\0\14\21\1\232\12\21\2\0\1\21\41\0"+
    "\1\233\31\0\1\21\1\0\1\21\6\0\1\234\26\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\15\21"+
    "\1\235\11\21\2\0\1\21\42\0\1\236\30\0\1\21"+
    "\1\0\1\21\6\0\20\21\1\237\6\21\2\0\1\21"+
    "\1\0\1\240\12\0\1\21\1\0\1\21\6\0\14\21"+
    "\1\241\12\21\2\0\1\21\41\0\1\242\31\0\1\21"+
    "\1\0\1\21\6\0\4\21\1\243\22\21\2\0\1\21"+
    "\31\0\1\244\41\0\1\21\1\0\1\21\6\0\1\245"+
    "\26\21\2\0\1\21\14\0\1\21\1\0\1\21\6\0"+
    "\10\21\1\246\16\21\2\0\1\21\1\247\13\0\1\21"+
    "\1\0\1\21\6\0\10\21\1\250\16\21\2\0\1\21"+
    "\1\251\13\0\1\21\1\0\1\21\6\0\17\21\1\252"+
    "\7\21\2\0\1\21\44\0\1\253\26\0\1\21\1\0"+
    "\1\21\6\0\1\254\26\21\2\0\1\21\25\0\1\255"+
    "\45\0\1\21\1\0\1\21\6\0\13\21\1\256\13\21"+
    "\2\0\1\21\14\0\1\21\1\0\1\21\6\0\24\21"+
    "\1\257\1\260\1\21\2\0\1\21\51\0\1\261\1\262"+
    "\20\0\1\21\1\0\1\21\6\0\26\21\1\263\2\0"+
    "\1\21\53\0\1\264\17\0\1\21\1\0\1\21\6\0"+
    "\17\21\1\265\7\21\2\0\1\21\14\0\1\21\1\0"+
    "\1\21\6\0\14\21\1\266\12\21\2\0\1\21\41\0"+
    "\1\267\31\0\1\21\1\0\1\21\6\0\4\21\1\270"+
    "\22\21\2\0\1\21\31\0\1\271\41\0\1\21\1\0"+
    "\1\21\6\0\1\272\26\21\2\0\1\21\25\0\1\273"+
    "\45\0\1\21\1\0\1\21\6\0\1\274\26\21\2\0"+
    "\1\21\25\0\1\275\45\0\1\21\1\0\1\21\6\0"+
    "\4\21\1\276\22\21\2\0\1\21\31\0\1\277\41\0"+
    "\1\21\1\0\1\21\6\0\13\21\1\300\13\21\2\0"+
    "\1\21\40\0\1\301\22\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6345];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\3\1\1\11\1\1\1\11"+
    "\17\1\2\11\1\1\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\1\0\1\11\6\1\1\0\5\1\1\0\6\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\0\6\1"+
    "\1\11\5\1\1\0\6\1\1\11\2\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\1\11\3\1\1\0\6\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\3\1\1\0\5\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\11\2\1\1\0\5\1\1\0"+
    "\1\1\1\0\4\1\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\3\1\2\11\1\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer buffer = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF, -1, -1, null);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { cosaspublicas.errores.add(new token("Lexico",yytext()+" no pertenece al lenguaje",yyline,yycolumn));
System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 51: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 52: break;
          case 3:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PARIZQ, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 4:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PARDER, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 5:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.COMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 6:
            { cosaspublicas.tokens.add(new token(yytext(),"Double",yyline,yycolumn));
                return new Symbol(ParserSym.DECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 7:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.DOSP, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 8:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.PYC, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 9:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.IGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 10:
            { cosaspublicas.tokens.add(new token(yytext(),"ID",yyline,yycolumn));
            return new Symbol(ParserSym.ID, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 11:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CORA, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 12:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CORC, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 13:
            { 
            }
          // fall through
          case 63: break;
          case 14:
            { cosaspublicas.tokens.add(new token(yytext(),"CHAR",yyline,yycolumn));
            return new Symbol(ParserSym.CADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 15:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.MAYORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 16:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.CUATROP, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 17:
            { cosaspublicas.tokens.add(new token(yytext(),"Simbolos",yyline,yycolumn));
            return new Symbol(ParserSym.MENORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 18:
            { cosaspublicas.tokens.add(new token(yytext(),"Id",yyline,yycolumn));
                return new Symbol(ParserSym.IDARREGLO, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 19:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RARR, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 20:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RDIV, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 21:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.REND, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 22:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMAX, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 23:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMIN, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 24:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMOD, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 25:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMUL, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 26:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RRES, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 27:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RSUM, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 28:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RVAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 29:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REJEX, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 30:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REJEY, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 31:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.REXEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 32:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMODA, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 33:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RLABEL, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 34:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RMEDIA, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 35:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RPRINT, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 36:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RCHAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 37:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RCOLUMN, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 38:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RDOUBLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 39:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULO, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 40:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RVALUES, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 41:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RCONSOLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 42:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RMEDIANA, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 43:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
              return new Symbol(ParserSym.RPROGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 44:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULOX, yycolumn, yyline, yytext());
            }
          // fall through
          case 94: break;
          case 45:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RTITULOY, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 46:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RBAR, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 47:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RPIE, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 48:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RVARIANZA, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 49:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
            return new Symbol(ParserSym.RLINE, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 50:
            { cosaspublicas.tokens.add(new token(yytext(),"Palabra Reservada",yyline,yycolumn));
                return new Symbol(ParserSym.RHISTOGRAM, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
