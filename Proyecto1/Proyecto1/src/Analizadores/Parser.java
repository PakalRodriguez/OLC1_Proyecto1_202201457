
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import main.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\006\000\002\007" +
    "\004\000\002\007\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\005\000" +
    "\002\011\003\000\002\011\003\000\002\013\013\000\002" +
    "\022\005\000\002\022\003\000\002\010\005\000\002\010" +
    "\003\000\002\003\010\000\002\003\006\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\012\013\000\002\025\013\000\002\024\011" +
    "\000\002\006\003\000\002\006\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\026\003\000\002\026\003\000\002\016\004\000\002\016" +
    "\003\000\002\017\011\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\011\000\002\017\011\000" +
    "\002\017\011\000\002\017\005\000\002\023\010\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\004\004\001\002\000\022\003\017\007" +
    "\007\011\015\042\010\047\022\050\024\051\014\052\026" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\004\030\226\001\002\000\004\027\211\001\002" +
    "\000\024\003\ufffd\005\ufffd\007\ufffd\011\ufffd\042\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000\024\003\ufff8" +
    "\005\ufff8\007\ufff8\011\ufff8\042\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\001\002\000\024\003\ufffe\005\ufffe\007\ufffe" +
    "\011\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001" +
    "\002\000\006\005\uffcc\036\uffcc\001\002\000\004\030\201" +
    "\001\002\000\024\003\ufffb\005\ufffb\007\ufffb\011\ufffb\042" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002\000\004" +
    "\005\177\001\002\000\024\003\ufffa\005\ufffa\007\ufffa\011" +
    "\ufffa\042\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002" +
    "\000\024\003\017\005\175\007\007\011\015\042\010\047" +
    "\022\050\024\051\014\052\026\001\002\000\006\005\uffce" +
    "\036\uffce\001\002\000\004\036\030\001\002\000\006\005" +
    "\uffcd\036\uffcd\001\002\000\024\003\ufffc\005\ufffc\007\ufffc" +
    "\011\ufffc\042\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\001" +
    "\002\000\006\005\uffcb\036\uffcb\001\002\000\024\003\ufff7" +
    "\005\ufff7\007\ufff7\011\ufff7\042\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\001\002\000\022\003\037\053\040\054\032" +
    "\055\031\056\043\057\042\061\034\062\036\001\002\000" +
    "\004\027\166\001\002\000\004\027\160\001\002\000\004" +
    "\037\155\001\002\000\004\027\147\001\002\000\024\003" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\001\002\000\004\027\101\001\002\000" +
    "\004\005\077\001\002\000\004\027\071\001\002\000\024" +
    "\003\037\053\040\054\032\055\031\056\043\057\042\060" +
    "\064\061\034\062\036\001\002\000\004\027\056\001\002" +
    "\000\004\027\044\001\002\000\006\010\046\025\045\001" +
    "\002\000\006\027\uffe0\041\uffe0\001\002\000\006\027\uffe1" +
    "\041\uffe1\001\002\000\004\041\050\001\002\000\006\006" +
    "\051\033\053\001\002\000\006\005\uffda\032\uffda\001\002" +
    "\000\004\005\054\001\002\000\006\005\uffdb\032\uffdb\001" +
    "\002\000\004\026\055\001\002\000\024\003\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\001\002\000\006\010\046\025\045\001\002\000\004" +
    "\041\060\001\002\000\006\006\051\033\053\001\002\000" +
    "\004\005\062\001\002\000\004\026\063\001\002\000\024" +
    "\003\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\001\002\000\012\047\022\050\024" +
    "\051\014\052\026\001\002\000\024\003\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9" +
    "\001\002\000\004\005\067\001\002\000\004\026\070\001" +
    "\002\000\004\037\uffca\001\002\000\006\010\046\025\045" +
    "\001\002\000\004\041\073\001\002\000\006\006\051\033" +
    "\053\001\002\000\004\005\075\001\002\000\004\026\076" +
    "\001\002\000\024\003\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\004" +
    "\026\100\001\002\000\024\003\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002" +
    "\000\006\010\046\025\045\001\002\000\004\041\103\001" +
    "\002\000\006\035\104\046\106\001\002\000\006\005\ufff4" +
    "\037\ufff4\001\002\000\004\005\145\001\002\000\036\006" +
    "\122\012\123\013\111\014\130\015\120\016\126\017\116" +
    "\020\121\021\124\022\125\023\107\024\131\033\112\034" +
    "\115\001\002\000\004\036\uffe6\001\002\000\012\005\uffdf" +
    "\037\uffdf\040\uffdf\045\uffdf\001\002\000\004\036\uffec\001" +
    "\002\000\012\005\uffdd\037\uffdd\040\uffdd\045\uffdd\001\002" +
    "\000\006\040\142\045\143\001\002\000\004\036\135\001" +
    "\002\000\012\005\uffde\037\uffde\040\uffde\045\uffde\001\002" +
    "\000\004\036\uffe9\001\002\000\010\005\ufff2\040\ufff2\045" +
    "\ufff2\001\002\000\004\036\uffeb\001\002\000\004\036\uffee" +
    "\001\002\000\012\005\uffdc\037\uffdc\040\uffdc\045\uffdc\001" +
    "\002\000\004\036\uffef\001\002\000\004\036\uffe8\001\002" +
    "\000\004\036\uffe7\001\002\000\004\036\uffea\001\002\000" +
    "\004\036\132\001\002\000\004\036\uffed\001\002\000\004" +
    "\036\uffe5\001\002\000\006\035\104\046\106\001\002\000" +
    "\004\037\134\001\002\000\012\005\ufff0\037\ufff0\040\ufff0" +
    "\045\ufff0\001\002\000\036\006\122\012\123\013\111\014" +
    "\130\015\120\016\126\017\116\020\121\021\124\022\125" +
    "\023\107\024\131\033\112\034\115\001\002\000\004\040" +
    "\137\001\002\000\036\006\122\012\123\013\111\014\130" +
    "\015\120\016\126\017\116\020\121\021\124\022\125\023" +
    "\107\024\131\033\112\034\115\001\002\000\004\037\141" +
    "\001\002\000\012\005\ufff1\037\ufff1\040\ufff1\045\ufff1\001" +
    "\002\000\036\006\122\012\123\013\111\014\130\015\120" +
    "\016\126\017\116\020\121\021\124\022\125\023\107\024" +
    "\131\033\112\034\115\001\002\000\006\005\ufff5\037\ufff5" +
    "\001\002\000\010\005\ufff3\040\ufff3\045\ufff3\001\002\000" +
    "\004\026\146\001\002\000\024\003\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\001" +
    "\002\000\006\010\046\025\045\001\002\000\004\041\151" +
    "\001\002\000\006\035\104\046\106\001\002\000\004\005" +
    "\153\001\002\000\004\026\154\001\002\000\024\003\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\001\002\000\004\005\156\001\002\000\004" +
    "\026\157\001\002\000\024\003\uffcf\005\uffcf\007\uffcf\011" +
    "\uffcf\042\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\001\002" +
    "\000\006\010\046\025\045\001\002\000\004\041\162\001" +
    "\002\000\006\035\104\046\106\001\002\000\004\005\164" +
    "\001\002\000\004\026\165\001\002\000\024\003\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\001\002\000\006\010\046\025\045\001\002\000" +
    "\004\041\170\001\002\000\006\035\104\046\106\001\002" +
    "\000\004\005\172\001\002\000\004\026\173\001\002\000" +
    "\024\003\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\001\002\000\024\003\uffff\005" +
    "\uffff\007\uffff\011\uffff\042\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\001\002\000\004\004\176\001\002\000\004\002" +
    "\000\001\002\000\004\026\200\001\002\000\024\003\ufff9" +
    "\005\ufff9\007\ufff9\011\ufff9\042\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\001\002\000\006\010\046\025\045\001\002" +
    "\000\004\027\203\001\002\000\004\035\204\001\002\000" +
    "\004\031\205\001\002\000\006\035\104\046\106\001\002" +
    "\000\004\005\207\001\002\000\004\026\210\001\002\000" +
    "\024\003\ufff6\005\ufff6\007\ufff6\011\ufff6\042\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\001\002\000\006\043\213\044" +
    "\212\001\002\000\004\041\220\001\002\000\004\041\214" +
    "\001\002\000\036\006\122\012\123\013\111\014\130\015" +
    "\120\016\126\017\116\020\121\021\124\022\125\023\107" +
    "\024\131\033\112\034\115\001\002\000\006\005\216\040" +
    "\142\001\002\000\004\026\217\001\002\000\024\003\uffe2" +
    "\005\uffe2\007\uffe2\011\uffe2\042\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\001\002\000\006\006\051\033\053\001\002" +
    "\000\004\032\222\001\002\000\006\035\104\046\106\001" +
    "\002\000\004\005\224\001\002\000\004\026\225\001\002" +
    "\000\024\003\uffe3\005\uffe3\007\uffe3\011\uffe3\042\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002\000\006\010\046" +
    "\025\045\001\002\000\004\027\230\001\002\000\004\006" +
    "\231\001\002\000\004\031\232\001\002\000\036\006\122" +
    "\012\123\013\111\014\130\015\120\016\126\017\116\020" +
    "\121\021\124\022\125\023\107\024\131\033\112\034\115" +
    "\001\002\000\004\005\234\001\002\000\004\026\235\001" +
    "\002\000\024\003\uffe4\005\uffe4\007\uffe4\011\uffe4\042\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\004\001\001\000\024\007\020\011" +
    "\010\012\011\013\026\014\012\021\022\023\017\024\015" +
    "\025\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\010\012\011\013\026\014\173\021\022\023" +
    "\017\024\015\025\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\032\016\040\017\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\056\001\001\000\002\001\001\000\004" +
    "\026\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\071\001\001\000\002\001\001\000\004\026\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\101" +
    "\001\001\000\002\001\001\000\004\022\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\107\004\113" +
    "\005\126\010\112\020\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\107\004\113" +
    "\005\126\020\135\001\001\000\002\001\001\000\012\003" +
    "\107\004\113\005\126\020\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\107\004\113\005\126\020" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\147\001\001\000" +
    "\002\001\001\000\004\022\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\160\001\001" +
    "\000\002\001\001\000\004\022\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\166" +
    "\001\001\000\002\001\001\000\004\022\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\107\004\113\005\126\010\214\020\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\220\001\001\000\002\001\001\000\004" +
    "\022\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\107\004" +
    "\113\005\126\020\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            cosaspublicas.errores.add(new token("Sintactico","No se esperaba"+s.value,s.right,s.left)
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           cosaspublicas.errores.add(new token("Sintactico Sin recuperacion","No se esperaba"+s.value,s.right,s.left)
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RPROGRAM listainstr REND RPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstr ::= listainstr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= imprimira 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= imprimire 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= declaracionvar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones ::= declaracionarr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionarr ::= RARR DOSP tipod CUATROP IDARREGLO MENORQUE arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionarr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arreglo ::= CORA listaexp CORC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arreglo ::= IDARREGLO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaexp ::= listaexp COMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaexp ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= aritmeticas PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funciones ::= estadisticas PARIZQ arreglo PARDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aritmeticas ::= RSUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmeticas ::= RRES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmeticas ::= RDIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmeticas ::= RMUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmeticas ::= RMOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estadisticas ::= RMEDIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estadisticas ::= RMEDIANA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estadisticas ::= RMODA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estadisticas ::= RVARIANZA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estadisticas ::= RMAX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estadisticas ::= RMIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estadisticas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionvar ::= RVAR DOSP tipod CUATROP ID MENORQUE expresion REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionvar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // imprimira ::= RCONSOLE CUATROP RCOLUMN IGUAL expresioncadena MAYORQUE arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimira",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // imprimire ::= RCONSOLE CUATROP RPRINT IGUAL listaexp REND PYC 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimire",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipod ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipod ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipod",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresioncadena ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioncadena",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresioncadena ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioncadena",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros parametrografica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametrografica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametrografica ::= RTITULO CUATROP tipod IGUAL expresioncadena REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametrografica ::= RTITULOX CUATROP tipod IGUAL expresioncadena REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametrografica ::= RTITULOY CUATROP tipod IGUAL expresioncadena REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrografica ::= REJEX CUATROP tipod IGUAL arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametrografica ::= RLABEL CUATROP tipod IGUAL arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametrografica ::= REJEY CUATROP tipod IGUAL arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametrografica ::= RVALUES CUATROP tipod IGUAL arreglo REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametrografica ::= error REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametrografica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // graficas ::= tipog PARIZQ listado PARDER REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipog ::= RBAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipog ::= RLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipog ::= RPIE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipog ::= RHISTOGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listado ::= parametros REXEC tipog REND PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
